/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import DijkstraGraph.Dijkstra;
import Storage.DBHasDataException;
import Storage.Database;
import basics.Connection;
import basics.Location;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.io.File;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

public class GoSwiss extends javax.swing.JFrame {

    private HashMap<String, Location> locmap = new HashMap<>();
    private HashMap<String, Connection> conmap = new HashMap<>();
    private static String SearchResult;
    private String from;
    private String to;
    JFileChooser file;
    private final String hint = "Type here and press enter to search online";
    public static JDialog UpdateStatus;
    public static JLabel message;

    /**
     * Creates new form NewJFrame
     */
    public GoSwiss() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Intro = new javax.swing.JPanel();
        AgreementScroll = new javax.swing.JScrollPane();
        AgreementText = new javax.swing.JTextArea();
        AcceptButton = new javax.swing.JButton();
        DeclineButton = new javax.swing.JButton();
        ImageIntroLabel = new javax.swing.JLabel();
        Choice = new javax.swing.JPanel();
        LocationsButton = new javax.swing.JButton();
        ConnectionsButton = new javax.swing.JButton();
        InfoLabel = new javax.swing.JLabel();
        ImageChoiceLabel = new javax.swing.JLabel();
        Locations = new javax.swing.JPanel();
        LocationsBox = new javax.swing.JComboBox<>();
        ReturnLocButton = new javax.swing.JButton();
        LocationDetails = new javax.swing.JLabel();
        EditLocationLabel = new javax.swing.JLabel();
        SearchField = new javax.swing.JFormattedTextField();
        UpdateLoc = new javax.swing.JButton();
        SearchLocButton = new javax.swing.JButton();
        Connections = new javax.swing.JPanel();
        ConFromBox = new javax.swing.JComboBox<>();
        ConToBox = new javax.swing.JComboBox<>();
        EditConnectionLabel = new javax.swing.JLabel();
        ReturnConButton = new javax.swing.JButton();
        ConnectionsDetails = new javax.swing.JLabel();
        ConInfoButton = new javax.swing.JButton();
        TextDetailsArea1 = new javax.swing.JTextArea();
        TextDetailsArea2 = new javax.swing.JTextArea();
        SearchCon = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Go! Swiss");
        setIconImage(new ImageIcon("logo.png").getImage());
        setSize(new java.awt.Dimension(800, 600));

        Intro.setBackground(new java.awt.Color(51, 204, 255));
        Intro.setPreferredSize(new java.awt.Dimension(800, 600));

        AgreementText.setEditable(false);
        AgreementText.setColumns(50);
        AgreementText.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        AgreementText.setLineWrap(true);
        AgreementText.setRows(5);
        AgreementText.setText("\t\t\tSoftware License Agreement\n\n\nThis Software License is made by (AV COMPANY NAME), (address of AV COMPANY NAME), to the Customer as an essential element of the services to be rendered by (AV COMPANY NAME) as defined in the system specification and any associated documents and agreement. \nSystem shall mean the deliverable product as defined in these documents.\n\nCustomer and (AV COMPANY NAME) agree that this Software License is deemed to be part of, and subject to, the terms of the Agreement applicable to both parties.\n\nSECTION 1\tLICENSE GRANT AND OWNERSHIP\n\n1.1\t(AV COMPANY NAME) hereby grants to Customer a worldwide, perpetual, non-exclusive, non-transferable license to all software for Customer’s use in connection with the establishment, use, maintenance and modification of the system implemented by (AV COMPANY NAME). \n\tSoftware shall mean executable object code of software programs and the patches, scripts, modifications, enhancements, designs, concepts or other materials that constitute the software programs necessary for the proper function and operation of the system as delivered by the (AV COMPANY NAME) and accepted by the Customer.\n\n1.2\tExcept as expressly set forth in this paragraph, (AV COMPANY NAME) shall at all times own all intellectual property rights in the software. Any and all licenses, product warranties or service contracts provided by third parties in connection with any software, \n\thardware or other software or services provided in the system shall be delivered to Customer for the sole benefit of Customer.\n\n1.3\tCustomer may supply to (AV COMPANY NAME) or allow the (AV COMPANY NAME) to use certain proprietary information, including service marks, logos, graphics, software, documents and business information and plans that have been authored or pre-owned by Customer. \n\tAll such intellectual property shall remain the exclusive property of Customer and shall not be used by (AV COMPANY NAME) for any purposes other than those associated with delivery of the system.\n\nSECTION 2\tCOPIES, MODIFICATION, AND USE\n\n2.1\tCustomer may make copies of the software for archival purposes and as required for modifications to the system. All copies and distribution of the software shall remain within the direct control of Customer and its representatives.\n\n2.2\tCustomer may make modifications to the source code version of the software, if and only if the results of all such modifications are applied solely to the system. \n\tIn no way does this Software License confer any right in Customer to license, sublicense, sell, or otherwise authorize the use of the software, whether in executable form, source code or otherwise, by any third parties, \n\texcept in connection with the use of the system as part of Customer’s business.\n\n2.3\tAll express or implied warranties relating to the software shall be deemed null and void in case of any modification to the software made by any party other than (AV COMPANY NAME).\n\nSECTION 3\tWARRANTIES AND REPRESENTATIONS\n\n(AV COMPANY NAME) represents and warrants to Customer that:\n\n3.1 \tit has all necessary rights and authority to execute and deliver this Software License and perform its obligations hereunder and to grant the rights granted under this Software License to Customer; \n\n3.2 \tthe goods and services provided by contractor under this Software License, including the software and all intellectual property provided hereunder, are original to (AV COMPANY NAME) or its subcontractors or partners; and\n\n3.3\t the software, as delivered as part of the system, will not infringe or otherwise violate the rights of any third party, or violate any applicable law, rule or regulation.\n\n3.4\t(AV COMPANY NAME) further represents and warrants that, throughout the System Warranty Period, the executable object code of software and the system will perform substantially in accordance with the System Specifications and Agreement. \n\tIf the software fails to perform as specified and accepted all remedies are pursuant to the policies set forth in the Specification and in the Agreement. No warranty of any type or nature is provided for the source code version of the software which is delivered as is.\n\n3.5\tExcept as expressly stated in this Agreement, there are no warranties, express or implied, including, but not limited to, the implied warranties of fitness for a particular purpose, of merchantability, or warranty of no infringement of third party intellectual property rights.\n\nSECTION 4\tINDEMNIFICATION\n\n4.1\t(AV COMPANY NAME) hereby indemnifies and shall defend and hold harmless Customer, its parent companies and its and their subsidiaries, affiliates, officers, directors, employees, agents and subcontractors from and against all liability, damages, loss, cost or expense,\n\t including but not limited to reasonable attorneys’ fees and expenses, arising out of or in connection with any breach or alleged breach of the Agreement or any third party claims that the software or system here provided by (AV COMPANY NAME) infringes or otherwise violates any rights of any such third party.\n\n4.2\tCustomer hereby indemnifies and shall defend and hold harmless (AV COMPANY NAME), its and their subsidiaries, affiliates, officers, directors, employees, agents and subcontractors from and against all liability, damages, loss, cost or expense, including but not limited to reasonable attorneys’ fees and expenses, \n\tarising out of or in connection with any third party claims that Customer’s use of the software in contravention of the grant of rights infringes or otherwise violates any rights of any such third party.\n\n4.3\tUpon the assertion of any claim or the commencement of any suit or proceeding against an indemnitee by any third party that may give rise to liability of an indemnitor hereunder, the indemnitee shall promptly notify the indemnitor of the existence of such a claim and shall give the indemnitor reasonable opportunity to defend and to settle the claim at its own expense and with counsel of its own selection. \n\tThe indemnitee shall cooperate with the indemnitor, shall at all times have the right full to participate in such a defense at its own expense and shall not be obligated, against its consent, to participate in any settlement which it reasonably believes would have an adverse effect on its business.\n\nSECTION 5\tTRANSFER AND TERMINATION\n\nThis license will automatically terminate upon the disassembly of the system cited above, unless the system is reassembled in its original configuration in another location.\n\n(AV COMPANY NAME) may terminate this license upon notice for failure to comply with any of terms set forth in this Software License. Upon termination, Customer is obligated to immediately destroy the software, including all copies and modifications.\n\nAs Customer’s duly authorized representative, I have read and agree to this License.\n\t\n\tRev4. Sept 2003\n\tDisclaimer: Corp® for this Software License Agreement and thee software\nALL RIGHTS RESERVED___");
        AgreementText.setWrapStyleWord(true);
        AgreementText.setBorder(new javax.swing.border.MatteBorder(null));
        AgreementText.setCaretPosition(0);
        AgreementText.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        AgreementText.setFocusable(false);
        AgreementScroll.setViewportView(AgreementText);

        AcceptButton.setBackground(new java.awt.Color(221, 229, 252));
        AcceptButton.setText("Accept");
        AcceptButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcceptButtonActionPerformed(evt);
            }
        });

        DeclineButton.setBackground(new java.awt.Color(221, 229, 252));
        DeclineButton.setText("Decline");
        DeclineButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DeclineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeclineButtonActionPerformed(evt);
            }
        });

        ImageIntroLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logoext.png"))); // NOI18N

        javax.swing.GroupLayout IntroLayout = new javax.swing.GroupLayout(Intro);
        Intro.setLayout(IntroLayout);
        IntroLayout.setHorizontalGroup(
            IntroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IntroLayout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addGroup(IntroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ImageIntroLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(IntroLayout.createSequentialGroup()
                        .addComponent(AcceptButton)
                        .addGap(18, 18, 18)
                        .addComponent(DeclineButton))
                    .addComponent(AgreementScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        IntroLayout.setVerticalGroup(
            IntroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IntroLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(ImageIntroLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AgreementScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(IntroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AcceptButton)
                    .addComponent(DeclineButton))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        Choice.setBackground(new java.awt.Color(51, 204, 255));
        Choice.setPreferredSize(new java.awt.Dimension(800, 600));

        LocationsButton.setBackground(new java.awt.Color(221, 229, 252));
        LocationsButton.setText("Station Details");
        LocationsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        LocationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocationsButtonActionPerformed(evt);
            }
        });

        ConnectionsButton.setBackground(new java.awt.Color(221, 229, 252));
        ConnectionsButton.setText("Travel Guide");
        ConnectionsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ConnectionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectionsButtonActionPerformed(evt);
            }
        });

        InfoLabel.setBackground(new java.awt.Color(221, 229, 252));
        InfoLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        InfoLabel.setText("<html> <body> <p> <b><u>Station Detail :</u></b> Shows details of a selected station connected to Switzerland<br> <b><u>Travel Guide :</u></b> Shows the route of the two chosen cities, as well as, information about them </p> </body>\t\t\t </html>");
        InfoLabel.setAlignmentX(50.0F);
        InfoLabel.setAlignmentY(50.0F);
        InfoLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Info"));
        InfoLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        InfoLabel.setOpaque(true);
        InfoLabel.setPreferredSize(new java.awt.Dimension(500, 30));

        ImageChoiceLabel.setBackground(new java.awt.Color(51, 204, 255));
        ImageChoiceLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logoext.png"))); // NOI18N
        ImageChoiceLabel.setMinimumSize(new java.awt.Dimension(0, 0));
        ImageChoiceLabel.setOpaque(true);
        ImageChoiceLabel.setPreferredSize(new java.awt.Dimension(800, 254));

        javax.swing.GroupLayout ChoiceLayout = new javax.swing.GroupLayout(Choice);
        Choice.setLayout(ChoiceLayout);
        ChoiceLayout.setHorizontalGroup(
            ChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChoiceLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(ChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ChoiceLayout.createSequentialGroup()
                        .addComponent(LocationsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ConnectionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(InfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE))
                .addGap(100, 100, 100))
            .addGroup(ChoiceLayout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(ImageChoiceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        ChoiceLayout.setVerticalGroup(
            ChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChoiceLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(ImageChoiceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(InfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConnectionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LocationsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60))
        );

        InfoLabel.getAccessibleContext().setAccessibleName("<html> <body> <p align=\"center\"> <b><u>Station Detail :</u></b> Shows details of a selected station connected to Switzerland<br> <b><u>Travel Guide :</u></b> Shows the route of the two chosen cities, as well as, information about them </p> </body>\t\t\t </html>");

        Locations.setBackground(new java.awt.Color(0, 204, 255));
        Locations.setPreferredSize(new java.awt.Dimension(800, 600));
        Locations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LocationsMouseClicked(evt);
            }
        });

        LocationsBox.setMaximumRowCount(5);
        LocationsBox.setModel(GuiTools.CreateComboBox());
        LocationsBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LocationsBoxItemStateChanged(evt);
            }
        });
        LocationsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocationsBoxActionPerformed(evt);
            }
        });

        ReturnLocButton.setText("<<Return");
        ReturnLocButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ReturnLocButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnLocButtonActionPerformed(evt);
            }
        });

        LocationDetails.setBackground(new java.awt.Color(221, 229, 252));
        LocationDetails.setText("No Results available yet");
        LocationDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Station Details"));
        LocationDetails.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        LocationDetails.setOpaque(true);
        LocationDetails.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        EditLocationLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        EditLocationLabel.setText("In the following list you can find the majority of the cities in Switzerland ");

        SearchField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SearchFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                SearchFieldFocusLost(evt);
            }
        });
        SearchField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchFieldMouseClicked(evt);
            }
        });
        SearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchFieldActionPerformed(evt);
            }
        });

        UpdateLoc.setBackground(new java.awt.Color(221, 229, 252));
        UpdateLoc.setText("Check For Updates");
        UpdateLoc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        UpdateLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateLocActionPerformed(evt);
            }
        });

        SearchLocButton.setBackground(new java.awt.Color(221, 229, 252));
        SearchLocButton.setText("Find Station");
        SearchLocButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchLocButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LocationsLayout = new javax.swing.GroupLayout(Locations);
        Locations.setLayout(LocationsLayout);
        LocationsLayout.setHorizontalGroup(
            LocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LocationsLayout.createSequentialGroup()
                .addGroup(LocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LocationsLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(ReturnLocButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LocationsLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(LocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SearchField)
                            .addGroup(LocationsLayout.createSequentialGroup()
                                .addComponent(LocationsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SearchLocButton))
                            .addComponent(LocationDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LocationsLayout.createSequentialGroup()
                .addContainerGap(167, Short.MAX_VALUE)
                .addGroup(LocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LocationsLayout.createSequentialGroup()
                        .addComponent(EditLocationLabel)
                        .addContainerGap(132, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LocationsLayout.createSequentialGroup()
                        .addComponent(UpdateLoc)
                        .addContainerGap())))
        );
        LocationsLayout.setVerticalGroup(
            LocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LocationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ReturnLocButton)
                .addGap(16, 16, 16)
                .addComponent(EditLocationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(LocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LocationsLayout.createSequentialGroup()
                        .addGroup(LocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(LocationsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SearchLocButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(148, 148, 148)
                        .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(LocationDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))
                    .addGroup(LocationsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(UpdateLoc)))
                .addGap(27, 27, 27))
        );

        Connections.setBackground(new java.awt.Color(0, 204, 255));
        Connections.setPreferredSize(new java.awt.Dimension(800, 600));

        ConFromBox.setMaximumRowCount(5);
        ConFromBox.setModel(GuiTools.CreateComboBox());
        ConFromBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                ConFromBoxPopupMenuWillBecomeVisible(evt);
            }
        });
        ConFromBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConFromBoxActionPerformed(evt);
            }
        });

        ConToBox.setMaximumRowCount(5);
        ConToBox.setModel(GuiTools.CreateComboBox());
        ConToBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                ConToBoxPopupMenuWillBecomeVisible(evt);
            }
        });
        ConToBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConToBoxActionPerformed(evt);
            }
        });

        EditConnectionLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        EditConnectionLabel.setText("Please Choose a from-to connection from the lists down below respectively");

        ReturnConButton.setText("<<Return");
        ReturnConButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ReturnConButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnConButtonActionPerformed(evt);
            }
        });

        ConnectionsDetails.setBackground(new java.awt.Color(221, 229, 252));
        ConnectionsDetails.setText("  No Results available yet");
        ConnectionsDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Route"));
        ConnectionsDetails.setOpaque(true);

        ConInfoButton.setBackground(new java.awt.Color(221, 229, 252));
        ConInfoButton.setText("Show Details");
        ConInfoButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ConInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConInfoButtonActionPerformed(evt);
            }
        });

        TextDetailsArea1.setEditable(false);
        TextDetailsArea1.setColumns(20);
        TextDetailsArea1.setRows(5);
        TextDetailsArea1.setBorder(javax.swing.BorderFactory.createTitledBorder("From Details"));
        TextDetailsArea1.setFocusable(false);

        TextDetailsArea2.setEditable(false);
        TextDetailsArea2.setColumns(20);
        TextDetailsArea2.setRows(5);
        TextDetailsArea2.setBorder(javax.swing.BorderFactory.createTitledBorder("To Details"));
        TextDetailsArea2.setFocusable(false);

        SearchCon.setBackground(new java.awt.Color(221, 229, 252));
        SearchCon.setText("Search Route");
        SearchCon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SearchCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchConActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ConnectionsLayout = new javax.swing.GroupLayout(Connections);
        Connections.setLayout(ConnectionsLayout);
        ConnectionsLayout.setHorizontalGroup(
            ConnectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConnectionsLayout.createSequentialGroup()
                .addGroup(ConnectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConnectionsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ReturnConButton))
                    .addGroup(ConnectionsLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(ConnectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(ConnectionsLayout.createSequentialGroup()
                                .addComponent(ConFromBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ConToBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(EditConnectionLabel))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(ConnectionsLayout.createSequentialGroup()
                .addContainerGap(103, Short.MAX_VALUE)
                .addGroup(ConnectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConnectionsLayout.createSequentialGroup()
                        .addComponent(TextDetailsArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76)
                        .addComponent(TextDetailsArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ConnectionsDetails, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(103, Short.MAX_VALUE))
            .addGroup(ConnectionsLayout.createSequentialGroup()
                .addGap(353, 353, 353)
                .addComponent(ConInfoButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(ConnectionsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SearchCon)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ConnectionsLayout.setVerticalGroup(
            ConnectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConnectionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ReturnConButton)
                .addGap(11, 11, 11)
                .addComponent(EditConnectionLabel)
                .addGap(40, 40, 40)
                .addGroup(ConnectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConFromBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConToBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(SearchCon)
                .addGap(36, 36, 36)
                .addComponent(ConnectionsDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106)
                .addComponent(ConInfoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ConnectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextDetailsArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextDetailsArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Connections, javax.swing.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Intro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Choice, javax.swing.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Locations, javax.swing.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Connections, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Intro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Choice, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Locations, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AcceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcceptButtonActionPerformed
        Intro.setVisible(false);
        Choice.setVisible(true);
    }//GEN-LAST:event_AcceptButtonActionPerformed

    private void DeclineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeclineButtonActionPerformed
        int decision = JOptionPane.showConfirmDialog(this, "Do you want to exit?", "Exit", JOptionPane.YES_NO_OPTION);
        if (decision == 0) {
            System.exit(decision);
        }
    }//GEN-LAST:event_DeclineButtonActionPerformed

    private void ReturnLocButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnLocButtonActionPerformed
        Intro.setVisible(false);
        Choice.setVisible(true);
        Locations.setVisible(false);
        LocationsBox.setVisible(true);
        UpdateLoc.setVisible(true);
        Storage.Database.disconnect();
    }//GEN-LAST:event_ReturnLocButtonActionPerformed

    private void LocationsBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocationsBoxActionPerformed
        if (Storage.Database.isConnected()) {
            locmap = Storage.Database.readSpecCityFromDB(LocationsBox.getSelectedItem().toString());
        }  
    }//GEN-LAST:event_LocationsBoxActionPerformed

    private void SearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchFieldActionPerformed
        
        SearchResult = SearchField.getText();
        try {
            Location newCity = new Location(SearchResult);
            LocationDetails.setText("<html>" + "Station: " + newCity.getName() + "<br>"
                    + "ID: " + newCity.getid() + "<br>"
                    + "Coordinates:<br>X: " + newCity.getCoordsX() + "<br>"
                    + "Y: " + newCity.getCoordsY() + "</html>");
        } catch (NullPointerException | IndexOutOfBoundsException ex) {
            LocationDetails.setText("We are really sorry, but there is no such city in Switzerland!!!!");
        }
    }//GEN-LAST:event_SearchFieldActionPerformed

    private void UpdateLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateLocActionPerformed
        
        int decision = JOptionPane.showConfirmDialog(this, "Are you sure?\nThis will lead to previous data loss!!!!", "Update", JOptionPane.YES_NO_OPTION);
        if (decision == 0) {
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                Database.writeCitiesToDB(Location.CreateLocationsMap(new HashMap()));
                System.out.println("Database created with success!!");
                System.out.println();
            } catch (DBHasDataException ex) {

                Database.DBError("DELETE FROM JLOCATION");
                try {
                    Database.writeCitiesToDB(Location.CreateLocationsMap(new HashMap()));
                } catch (DBHasDataException ex1) {
                    Logger.getLogger(GoSwiss.class.getName()).log(Level.SEVERE, null, ex1);
                }
                this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        }
    }//GEN-LAST:event_UpdateLocActionPerformed

    private void SearchFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchFieldFocusGained
       
        SearchField.setText("");
        SearchField.setForeground(Color.black);
    }//GEN-LAST:event_SearchFieldFocusGained

    private void SearchFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchFieldFocusLost
        
        if (SearchField.getText().equals("")) {
            SearchField.setText(hint);
            SearchField.setForeground(Color.lightGray);
        }
    }//GEN-LAST:event_SearchFieldFocusLost

    private void LocationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LocationsMouseClicked
        
        SearchField.transferFocus();
    }//GEN-LAST:event_LocationsMouseClicked

    private void ConFromBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConFromBoxActionPerformed
       
        from = ConFromBox.getSelectedItem().toString();
    }//GEN-LAST:event_ConFromBoxActionPerformed

    private void ReturnConButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnConButtonActionPerformed
        
        Intro.setVisible(false);
        Choice.setVisible(true);
        Connections.setVisible(false);
        Storage.Database.disconnect();
    }//GEN-LAST:event_ReturnConButtonActionPerformed

    private void ConToBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConToBoxActionPerformed
        // TODO add your handling code here:
        to = ConToBox.getSelectedItem().toString();
    }//GEN-LAST:event_ConToBoxActionPerformed

    private void ConInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConInfoButtonActionPerformed
        // TODO add your handling code here:
        if (Storage.Database.isConnected()) {
            locmap = Storage.Database.readSpecCityFromDB(from);
        }
        TextDetailsArea1.setText("Station: " + locmap.get(from).getName() + "\n"
                + "ID: " + locmap.get(from).getid() + "\n"
                + "Coordinates: X: " + locmap.get(from).getCoordsX() + "\n"
                + "Y: " + locmap.get(from).getCoordsY());
        if (Storage.Database.isConnected()) {
            locmap = Storage.Database.readSpecCityFromDB(to);
        }
        TextDetailsArea2.setText("Station: " + locmap.get(to).getName() + "\n"
                + "ID: " + locmap.get(to).getid() + "\n"
                + "Coordinates: X: " + locmap.get(to).getCoordsX() + "\n"
                + "Y: " + locmap.get(to).getCoordsY());
    }//GEN-LAST:event_ConInfoButtonActionPerformed

    private void SearchConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchConActionPerformed
        Location locfrom;
        Location locto;
        if (Storage.Database.isConnected()) {
            locfrom = Storage.Database.readSpecCityFromDB(from).get(from);
            locto = Storage.Database.readSpecCityFromDB(to).get(to);
        } else {
            locfrom = locmap.get(from);
            locto = locmap.get(to);
        }
        if (conmap.get(from + ":" + to) != null) {
            ConnectionsDetails.setText(conmap.get(from + ":" + to).getFrom().getStation().getName() + "-->"
                    + conmap.get(from + ":" + to).getTo().getStation().getName());
        } else if (locfrom.getid() != 0 && locto.getid() != 0 && locfrom.getid() != locto.getid()) {
            Dijkstra d = new Dijkstra(conmap, locfrom.getName(),
                    locto.getName());
            ConnectionsDetails.setText(d.getPath().replaceAll(",", "-->").replaceAll("\\[", "").replaceAll("]", ""));
        } else {
            ConnectionsDetails.setText("There is not such information for this travel yet");
        }
        if (!ConnectionsDetails.getText().equals("No Results available yet")) {
            ConInfoButton.setVisible(true);
            TextDetailsArea1.setVisible(true);
            TextDetailsArea2.setVisible(true);
        }
        TextDetailsArea1.setText("Press the button to view");
        TextDetailsArea2.setText("Press the button to view");
    }//GEN-LAST:event_SearchConActionPerformed

    private void SearchFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchFieldMouseClicked
        // TODO add your handling code here:
        LocationDetails.setText("No Results available yet");
    }//GEN-LAST:event_SearchFieldMouseClicked

    private void ConFromBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_ConFromBoxPopupMenuWillBecomeVisible
        // TODO add your handling code here:
        ConnectionsDetails.setText("No Results available yet");
    }//GEN-LAST:event_ConFromBoxPopupMenuWillBecomeVisible

    private void ConToBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_ConToBoxPopupMenuWillBecomeVisible
        
        ConnectionsDetails.setText("No Results available yet");
    }//GEN-LAST:event_ConToBoxPopupMenuWillBecomeVisible

    private void ConnectionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectionsButtonActionPerformed
        
        Connections.setVisible(true);
        Choice.setVisible(false);
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Storage.Database.connect();
        ConToBox.setSelectedIndex(0);
        ConFromBox.setSelectedIndex(0);
        ConnectionsDetails.setText("No Results available yet");
        TextDetailsArea1.setText("Press the button to view");
        TextDetailsArea2.setText("Press the button to view");
        ConInfoButton.setVisible(false);
        TextDetailsArea1.setVisible(false);
        TextDetailsArea2.setVisible(false);
        if (!Storage.Database.isConnected()) {
            int decision = JOptionPane.showConfirmDialog(this, "An unexpected error had occured\nDO you want to read from file?", "ERROR", JOptionPane.YES_NO_OPTION);
            if (decision == 0) {
                file = new JFileChooser();
                file.setCurrentDirectory(new File("."));
                int returnVal = file.showDialog(file, "Select");
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    conmap = Storage.FileUtilities.readFromFile(file.getSelectedFile().getAbsolutePath());
                    locmap = Storage.FileUtilities.readFromFile("cities.dat");
                } else {
                    Choice.setVisible(true);
                    Connections.setVisible(false);
                }
            } else {
                Choice.setVisible(true);
                Connections.setVisible(false);
            }
        } else {
            conmap = Storage.Database.readConnectionsFromDB();
        }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_ConnectionsButtonActionPerformed

    private void LocationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocationsButtonActionPerformed
        Locations.setVisible(true);
        Choice.setVisible(false);
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Storage.Database.connect();
        SearchField.setText(hint);
        SearchField.setForeground(Color.lightGray);
        LocationDetails.setText("No Results available yet");
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        if (!Storage.Database.isConnected()) {
            LocationsBox.setVisible(false);
            UpdateLoc.setVisible(false);
            SearchLocButton.setVisible(false);
            int decision = JOptionPane.showConfirmDialog(this, "An unexpected error had occured\nDO you want to read from file?", "ERROR", JOptionPane.YES_NO_OPTION);
            if (decision == 0) {
                file = new JFileChooser();
                file.setCurrentDirectory(new File("."));
                int returnVal = file.showDialog(file, "Select");
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    locmap = Storage.FileUtilities.readFromFile(file.getSelectedFile().getAbsolutePath());
                    LocationsBox.setVisible(true);
                    SearchLocButton.setVisible(true);
                    LocationsBox.setSelectedIndex(0);
                    LocationDetails.setText("No Results available yet");
                }
            }
        } else {
            LocationsBox.setSelectedIndex(0);
            LocationDetails.setText("No Results available yet");
        }
    }//GEN-LAST:event_LocationsButtonActionPerformed

    private void LocationsBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LocationsBoxItemStateChanged
         LocationDetails.setText("No Results available yet");
    }//GEN-LAST:event_LocationsBoxItemStateChanged

    private void SearchLocButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchLocButtonActionPerformed
        LocationDetails.setText("<html>" + "Station: " + locmap.get(LocationsBox.getSelectedItem().toString()).getName() + "<br>"
                + "ID: " + locmap.get(LocationsBox.getSelectedItem().toString()).getid() + "<br>"
                + "Coordinates:<br>X: " + locmap.get(LocationsBox.getSelectedItem().toString()).getCoordsX() + "<br>"
                + "Y: " + locmap.get(LocationsBox.getSelectedItem().toString()).getCoordsY() + "</html>");
    }//GEN-LAST:event_SearchLocButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GoSwiss.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                GoSwiss app = new GoSwiss();
                app.setLocationRelativeTo(null);
                app.setMinimumSize(new Dimension(400, 400));
                app.setVisible(true);
                app.Intro.setVisible(true);
                app.Choice.setVisible(false);
                app.Connections.setVisible(false);
                app.Locations.setVisible(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AcceptButton;
    private javax.swing.JScrollPane AgreementScroll;
    private javax.swing.JTextArea AgreementText;
    private javax.swing.JPanel Choice;
    private javax.swing.JComboBox<String> ConFromBox;
    private javax.swing.JButton ConInfoButton;
    private javax.swing.JComboBox<String> ConToBox;
    private javax.swing.JPanel Connections;
    private javax.swing.JButton ConnectionsButton;
    private javax.swing.JLabel ConnectionsDetails;
    private javax.swing.JButton DeclineButton;
    private javax.swing.JLabel EditConnectionLabel;
    private javax.swing.JLabel EditLocationLabel;
    private javax.swing.JLabel ImageChoiceLabel;
    private javax.swing.JLabel ImageIntroLabel;
    private javax.swing.JLabel InfoLabel;
    private javax.swing.JPanel Intro;
    private javax.swing.JLabel LocationDetails;
    private javax.swing.JPanel Locations;
    private javax.swing.JComboBox<String> LocationsBox;
    private javax.swing.JButton LocationsButton;
    private javax.swing.JButton ReturnConButton;
    private javax.swing.JButton ReturnLocButton;
    private javax.swing.JButton SearchCon;
    private javax.swing.JFormattedTextField SearchField;
    private javax.swing.JButton SearchLocButton;
    private javax.swing.JTextArea TextDetailsArea1;
    private javax.swing.JTextArea TextDetailsArea2;
    private javax.swing.JButton UpdateLoc;
    // End of variables declaration//GEN-END:variables
}
